
#Imports necesarios
import cv2
import argparse
import numpy as np

#Argumentos obligatorios
ap = argparse.ArgumentParser()
ap.add_argument('-v', '--video', required=True, help = 'path to input image')
ap.add_argument('-c', '--config', required=True, help = 'path to yolo config file')
ap.add_argument('-w', '--weights', required=True, help = 'path to yolo pre-trained weights')
ap.add_argument('-cl', '--classes', required=True, help = 'path to text file containing class names')
args = ap.parse_args()

output_file = "p1_output.txt"
output = open(output_file, "w")
print(output_file)

def get_output_layers(net):
    
    layer_names = net.getLayerNames()
    
    output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

    return output_layers


def draw_prediction(img, class_id, confidence, x, y, x_plus_w, y_plus_h):

    label = str(classes[class_id])

    color = COLORS[class_id]

    cv2.rectangle(img, (x,y), (x_plus_w,y_plus_h), color, 2)

    cv2.putText(img, label, (x-10,y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

def print_prediction(class_id, x, y, w, h):

    label = str(classes[class_id])
    
    #print( label + " " + str(x) + " " + str(y) + " " + str(w) + " " + str(h) )

    output.write(label + " " + str(x) + " " + str(y) + " " + str(w) + " " + str(h) + "\n")

#Image scale
scale = 0.00392

#Read the text file containing class names in human readable form and extract the class names to a list
classes = None
with open(args.classes, 'r') as f:
    classes = [line.strip() for line in f.readlines()]

#Generate different colors for different classes to draw bounding boxes.
COLORS = np.random.uniform(0, 255, size=(len(classes), 3))

#Cargamos la red que se compone de dos partes: los pesos y la configuracion
net = cv2.dnn.readNet(args.weights, args.config)

# Get video stream
cap = cv2.VideoCapture(args.video)

prev_x = 0
prev_y = 0
prev_w = 0
prev_h = 0

#Get the dimensions of the image, can optimize because video has constant dimensions
Width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
Height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
output.write(str(Width) + " " + str(Height) + "\n")

# While we have the video opened so we can get a new frame
while(cap.isOpened()):

    # Read next frame. If it fails 'success' will be false
    success, image = cap.read()
    
    blob = cv2.dnn.blobFromImage(image, scale, (416,416), (0,0,0), True, crop=False)

    net.setInput(blob)

    outs = net.forward(get_output_layers(net))

    class_ids = []
    confidences = []
    boxes = []
    conf_threshold = 0.5
    nms_threshold = 0.4


    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                center_x = int(detection[0] * Width)
                center_y = int(detection[1] * Height)
                w = int(detection[2] * Width)
                h = int(detection[3] * Height)
                x = center_x - w / 2
                y = center_y - h / 2
                class_ids.append(class_id)
                confidences.append(float(confidence))
                boxes.append([x, y, w, h])


    indices = cv2.dnn.NMSBoxes(boxes, confidences, conf_threshold, nms_threshold)

    for i in indices:
        i = i[0]
        if i == 0:
            found_person = True
            box = boxes[i]
            x = box[0]
            y = box[1]
            w = box[2]
            h = box[3]
            #draw_prediction(image, class_ids[i], confidences[i], round(x), round(y), round(x+w), round(y+h))
            print_prediction(class_ids[i], x, y, w, h)

            prev_x = x
            prev_y = y
            prev_w = w
            prev_h = h
        
    if found_person == False:
        print_prediction(0, prev_x, prev_y, prev_w, prev_h)

    cv2.imshow("object detection", image)
    if cv2.waitKey(1) & 0xFF == ord('q'): break

cv2.destroyAllWindows()
output.close()
